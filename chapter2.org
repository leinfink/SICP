#+TITLE: Structure and Interpretation of Computer Programs
#+STARTUP: nohideblocks

#+name: commentify
#+begin_src emacs-lisp :var result="" :exports none
(concat ";=> " (format "%s" result))
#+end_src

#+RESULTS: commentify
: ;=> 

/Attribution:/ Harold Abelson and Gerald Jay Sussman with Julie Sussman, foreword by Alan J. Perlis, Â©1996 by The Massachusetts Institute of Technology, licensed under the Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA 4.0). Notes, (modified or adjusted) excerpts, and exercises by @leinfink.

* TODO Chapter 2 [89%]
:PROPERTIES:
:header-args:scheme: :session *sicp2* :post commentify(*this*)
:COOKIE_DATA: todo recursive
:END:
  - another key aspect of a programming language is the means it provides for building abstractions by combining data objects to form /compound data/
  - compound data allows for /data abstractions/ (isolating the representation of data objects from their use --> /abstraction barriers/)
  - a programming language should provide some kind of "glue" to combine data objects into more complex data objects
    - one way of doing this is simply using procedures (blurring the distinction between procedures and data)
    - /closure/
    - /conventional interfaces/
  - /symbolic expressions/ :: data whose elementary parts can be arbitraty symbols rather than only numbers
  - /generic operations/
  - /data-directed programming/
** 2.1 Introduction to Data Abstraction [0/16]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
- data abstraction :: enables us to isolate the use of a compound data object from the details of how it is constructed
  
*** 2.1.1 Example: Arithmetic Operations for Rational Numbers
**** Pairs
**** Representing rational numbers

#+begin_src scheme :exports both 
  (define (make-rat n d) (cons n d))
  (define (numer x) (car x))
  (define (denom x) (cdr x))

  (define (print-rat x)
    (newline)
    (display (numer x))
    (display "/")
    (display (denom x)))
#+end_src

#+RESULTS:
: ;=> #<void>

#+begin_src scheme :exports both 
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
#+end_src

#+RESULTS:
: ;=> #<void>

#+begin_src scheme :exports both :results output
  (define one-half (make-rat 1 2))
  (print-rat one-half)

  (define one-third (make-rat 1 3))
  (print-rat
   (add-rat one-half one-third))

  (print-rat
   (mul-rat one-half one-third))

  (print-rat
   (add-rat one-third one-third))
#+end_src

#+RESULTS:
: ;=> 
: 1/2
: 5/6
: 1/6
: 6/9


#+begin_src scheme :exports both :results output
    (define (gcd a b)
      (if (= b 0)
	  a
	  (gcd b (remainder a b))))

  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) 
	    (/ d g))))
  
  (print-rat
   (add-rat one-third one-third))

#+end_src

#+RESULTS:
: ;=> 
: 2/3

**** TODO Exercise 2.1
#+begin_src scheme :exports both :results output
  (define (make-rat n d)
    (define (normalize n d)
      (if (> 0 d)
	  (cons (- 0 n) (- 0 d))
	  (cons n d)))
    (let* ((normalized (normalize n d))
	   (n (car normalized))
	   (d (cdr normalized))
	   (g (gcd n d)))
      (cons (/ n g) 
	    (/ d g))))

  (print-rat (make-rat 3 4))
  (print-rat (make-rat -3 -4))
  (print-rat (make-rat -3 4))
  (print-rat (make-rat 3 -4))
#+end_src

#+RESULTS:
: ;=> 
: 3/4
: 3/4
: -3/4
: -3/4

*** 2.1.2 Abstraction Barriers
**** TODO Exercise 2.2
**** TODO Exercise 2.3
*** 2.1.3 What Is Meant by Data?
**** TODO Exercise 2.4
**** TODO Exercise 2.5
**** TODO Exercise 2.6
*** 2.1.4 Extended Exercise: Interval Arithmetic
**** TODO Exercise 2.7
**** TODO Exercise 2.8
**** TODO Exercise 2.9
**** TODO Exercise 2.10
**** TODO Exercise 2.11
**** TODO Exercise 2.12
**** TODO Exercise 2.13
**** TODO Exercise 2.14
**** TODO Exercise 2.15
**** TODO Exercise 2.16
** 2.2 Hierarchical Data and the Closure Property [0/34]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
*** 2.2.1 Representing Sequences
**** List operations
**** TODO Exercise 2.17
**** TODO Exercise 2.18
**** TODO Exercise 2.19
**** TODO Exercise 2.20
**** Mapping over lists
**** TODO Exercise 2.21
**** TODO Exercise 2.22
**** TODO Exercise 2.23
*** 2.2.2 Hierarchical Structures
**** TODO Exercise 2.24
**** TODO Exercise 2.25
**** TODO Exercise 2.26
**** TODO Exercise 2.27
**** TODO Exercise 2.28
**** TODO Exercise 2.29
**** Mapping over trees
**** TODO Exercise 2.30
**** TODO Exercise 2.31
**** TODO Exercise 2.32
*** 2.2.3 Sequences as Conventional Interfaces
**** Sequence Operations
**** TODO Exercise 2.33
**** TODO Exercise 2.34
**** TODO Exercise 2.35
**** TODO Exercise 2.36
**** TODO Exercise 2.37
**** TODO Exercise 2.38
**** Nested Mappings
**** TODO Exercise 2.40
**** TODO Exercise 2.41
**** TODO Exercise 2.42
**** TODO Exercise 2.43
*** 2.2.4 Example: A Picture Language
**** The picture language
**** TODO Exercise 2.44
**** Higher-order operations
**** TODO Exercise 2.45
**** Frames
**** TODO Exercise 2.46
**** TODO Exercise 2.47
**** Painters
**** TODO Exercise 2.48
**** TODO Exercise 2.49
**** Transforming and combining painters
**** TODO Exercise 2.50
**** TODO Exercise 2.51
**** Levels of language for robust design
** 2.3 Symbolic Data [0/20]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
*** 2.3.1 Quotation
**** TODO Exercise 2.53
**** TODO Exercise 2.54
**** TODO Exercise 2.55
*** 2.3.2 Example: Symbolic Differentiation
**** The differentiation program with abstract data
**** Representing algebraic expressions
**** TODO Exercise 2.56
**** TODO Exercise 2.57
**** TODO Exercise 2.58
*** 2.3.3 Example: Representing Sets
**** Sets as unordered lists
**** TODO Exercise 2.59
**** TODO Exercise 2.60
**** Sets as ordered lists
**** TODO Exercise 2.61
**** TODO Exercise 2.62
**** Sets as binary trees
**** TODO Exercise 2.63
**** TODO Exercise 2.64
**** TODO Exercise 2.65
**** Sets and information retrieval
**** TODO Exercise 2.66
*** 2.3.4 Example: Huffman Encoding Trees
**** Generating Huffman trees
**** Representing Huffman trees
**** The decoding procedure
**** Sets of weighted elements
**** TODO Exercise 2.67
**** TODO Exercise 2.68
**** TODO Exercise 2.69
**** TODO Exercise 2.70
**** TODO Exercise 2.71
**** TODO Exercise 2.72
** 2.4 Multiple Representations for Abstract Data [0/4]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
*** 2.4.1 Representations for Complex Numbers
*** 2.4.2 Tagged data
*** 2.4.3 Data-Directed Programming and Additivity
**** TODO Exercise 2.73
**** TODO Exercise 2.74
**** Message passing
**** TODO Exercise 2.75
**** TODO Exercise 2.76
** 2.5 Systems with Generic Operations [0/21]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
*** 2.5.1 Generic Arithmetic Operations
**** TODO Exercise 2.77
**** TODO Exercise 2.78
**** TODO Exercise 2.79
**** TODO Exercise 2.80
*** 2.5.2 Combining Data of Different Types
**** Coercion
**** Hierarchies of types
**** Inadequacies of hierarchies
**** TODO Exercise 2.81
**** TODO Exercise 2.82
**** TODO Exercise 2.83
**** TODO Exercise 2.84
**** TODO Exercise 2.85
**** TODO Exercise 2.86
*** 2.5.3 Example: Symbolic Algebra
**** Arithmetic on polynomials
**** Representing term lists
**** TODO Exercise 2.87
**** TODO Exercise 2.88
**** TODO Exercise 2.89
**** TODO Exercise 2.90
**** TODO Exercise 2.91
**** Hierarchies of types in symbolic algebra
**** TODO Exercise 2.92
**** Extended exercise: Rational functions
**** TODO Exercise 2.93
**** TODO Exercise 2.94
**** TODO Exercise 2.95
**** TODO Exercise 2.96
**** TODO Exercise 2.97
